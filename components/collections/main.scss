@mixin focusOutlineColor($focus-color) {
	// Apply :focus styles as a fallback
	// These styles will be applied to all browsers that don't use the polyfill, this includes browsers which support the feature natively.
	body:not(.js-focus-visible) &,
	html:not(.js-focus-visible) & {
		// Standardise focus styles.
		:focus {
			outline: 2px solid $focus-color;
		}

		input:focus,
		textarea:focus,
		select:focus {
			box-shadow: 0 0 0 1px $focus-color;
		}
	}

	// When the focus-visible polyfill is applied `.js-focus-visible` is added to the html dom node
	// (the body node in v4 of the 3rd party polyfill)

	// stylelint-disable-next-line selector-no-qualifying-type
	body.js-focus-visible &, // stylelint-disable-next-line selector-no-qualifying-type
	html.js-focus-visible & {
		// Standardise focus styles.
		// stylelint-disable-next-line selector-no-qualifying-type
		.focus-visible {
			outline: 2px solid $focus-color;
		}
		// stylelint-disable-next-line selector-no-qualifying-type
		input.focus-visible, // stylelint-disable-next-line selector-no-qualifying-type
		textarea.focus-visible,
		select.focus-visible {
			box-shadow: 0 0 0 1px $focus-color;
		}
	}


	// Styles given :focus-visible support. Extra selectors needed to match
	// previous `:focus` selector specificity.
	body:not(.js-focus-visible) & :focus-visible,
	html:not(.js-focus-visible) & :focus-visible,
	:focus-visible {
		outline: 2px solid $focus-color;
	}

	body:not(.js-focus-visible) & input:focus-visible,
	html:not(.js-focus-visible) & input:focus-visible,
	body:not(.js-focus-visible) & textarea:focus-visible,
	html:not(.js-focus-visible) & textarea:focus-visible,
	body:not(.js-focus-visible) & select:focus-visible,
	html:not(.js-focus-visible) & select:focus-visible,
	input:focus-visible,
	textarea:focus-visible,
	select:focus-visible {
		box-shadow: 0 0 0 1px $focus-color;
	}
}

.collection {
	display: flex;
	flex: 1 1 auto;
	flex-flow: column nowrap;
	justify-content: flex-start;
	position: relative;
	width: auto;
	padding: 12px;
	overflow: visible;
	box-sizing: border-box;
}

.collection--regular {
	background: oColorsByName('claret-70');
	@include focusOutlineColor($focus-color: black);
	@include oGridRespondTo(M) {
		height: 100%;
	}
}

.collection--lite {
	background: oColorsByName('white-40');
	border: 1px solid oColorsByName('black-5');
	padding-top: 18px;
}

.collection__header {
	overflow: hidden;
	word-break: break-word;
}

.collection__header--regular {
	color: oColorsByName('white');
}

.collection__header--lite {
	color: oColorsByName('black');
}

.collection__title {
	@include oTypographySans($weight: 'semibold', $scale: 1);
	margin: 0;
}

.collection__concepts {
	@include oTypographySans($scale: 1);

	margin: 0;
	margin-left: -3px;
	padding: oSpacingByName('s4') 0 0;

	flex-grow: 1;
	list-style: none;
}

.collection__concept {
	display: inline-block;
}

.collection__meta {
	padding-top: oSpacingByName('s4');

	.n-myft-follow-button {
		margin: 0;
	}
}

.collection-follow-all__button {
	@include oButtonsContent($opts: (
		'type': 'secondary'
	));
}

.collection-follow-all__button--regular {
	@include oButtonsContent($opts: (
		'type': 'primary',
		'theme': (
			'color': 'white',
			'context': 'claret-70'
		)
	), $include-base-styles: false);
}

.collection-follow-all__button--lite {
	@include oButtonsContent($opts: (
		'type': 'primary'
	), $include-base-styles: false);
}
